{"version":3,"file":"static/js/782.bae9fcd1.chunk.js","mappings":"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","sources":["redux/selectors.js","webpack://react-homework-template/./src/Pages/Contacts/Contacts.module.css?47f7","webpack://react-homework-template/./src/components/Form/Form.module.css?89ba","components/Form/Form.js","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.js","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","webpack://react-homework-template/./src/components/Contact/Contact.module.css?03fd","components/Contact/Contact.js","components/ContactList/ContactList.js","Pages/Contacts/Contacts.js","webpack://react-homework-template/./src/components/Section/Section.module.css?dbe8","components/Section/Section.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["export const getContacts = state => state.contacts.contacts.items;\n\nexport const getIsLoading = state => state.contacts.contacts.isLoading;\n\nexport const getError = state => state.contacts.contacts.error;\n\nexport const getFilter = state => state.contacts.filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"contacts_content\":\"Contacts_contacts_content__2CKpM\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Form_form__e1yzW\",\"form__input\":\"Form_form__input__qyBih\",\"form__button\":\"Form_form__button__4s6xx\"};","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { nanoid } from 'nanoid';\nimport css from './Form.module.css';\nimport { getContacts } from 'redux/selectors';\nimport { addContact } from 'redux/operations';\n\nconst inputNameId = nanoid(5);\nconst inputPhoneId = nanoid(5);\nconst nameInputPattern =\n  \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\";\nconst phoneInputPattern =\n  '+?d{1,4}?[-.s]?(?d{1,3}?)?[-.s]?d{1,4}[-.s]?d{1,4}[-.s]?d{1,9}';\n\nconst Form = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const [currentContact, setCurrentContact] = useState({});\n  const contacts = useSelector(getContacts);\n\n  const dispatch = useDispatch();\n\n  const checkContactRepetition = (contact, presentContacts) => {\n    for (let item of presentContacts) {\n      if (item.name === contact.name) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  const showAlert = name => {\n    alert(`${name} is already in your contacts`);\n  };\n\n  const onAddContact = contact => {\n    if (checkContactRepetition(contact, contacts)) {\n      showAlert(contact.name);\n      return;\n    }\n    dispatch(addContact(currentContact));\n  };\n\n  const onFormSubmit = event => {\n    event.preventDefault();\n\n    onAddContact(currentContact);\n\n    formReset();\n  };\n\n  const formReset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const onInputChange = event => {\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        setCurrentContact(prevState => ({\n          ...prevState,\n          [name]: value,\n        }));\n        break;\n      case 'number':\n        setNumber(value);\n        setCurrentContact(prevState => ({\n          ...prevState,\n          [name]: value,\n        }));\n        break;\n      default:\n        return;\n    }\n  };\n\n  return (\n    <form className={css.form} onSubmit={onFormSubmit}>\n      <label htmlFor={inputNameId}>Name</label>\n      <input\n        id={inputNameId}\n        className={css.form__input}\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        pattern={nameInputPattern}\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        placeholder=\"Enter name here\"\n        required\n        onChange={onInputChange}\n      />\n      <label htmlFor={inputPhoneId}>Number</label>\n      <input\n        id={inputPhoneId}\n        className={css.form__input}\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        pattern={phoneInputPattern}\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        placeholder=\"Enter phone number\"\n        required\n        onChange={onInputChange}\n      />\n      <button type=\"submit\" className={css.form__button}>\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default Form;\n","// extracted by mini-css-extract-plugin\nexport default {};","import { useDispatch, useSelector } from 'react-redux';\n\nimport css from './Filter.module.css';\nimport { filterChange } from 'redux/contactsSlice';\nimport { getFilter } from 'redux/selectors';\n\nconst Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const onFilterChange = event => {\n    const text = event.target.value;\n    dispatch(filterChange({ text }));\n  };\n  return (\n    <>\n      <p>Find contact by name</p>\n      <input\n        className={css.section__input}\n        type=\"text\"\n        placeholder=\"Enter name here\"\n        value={filter}\n        onChange={onFilterChange}\n      ></input>\n    </>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"contacts__list\":\"ContactList_contacts__list__hSN0M\"};","// extracted by mini-css-extract-plugin\nexport default {\"contacts__list__item__content\":\"Contact_contacts__list__item__content__hw4Dw\",\"contact_name\":\"Contact_contact_name__5XtDA\",\"delete_btn\":\"Contact_delete_btn__X4RZf\"};","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\nimport css from './Contact.module.css';\n\nconst Contact = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  const onDeleteContact = () => {\n    dispatch(deleteContact(id));\n  };\n  return (\n    <li className={css.contact_name}>\n      <div className={css.contacts__list__item__content}>\n        <span>\n          {name}: {number}\n        </span>\n        <button\n          type=\"button\"\n          className={css.delete_btn}\n          onClick={onDeleteContact}\n        >\n          Delete\n        </button>\n      </div>\n    </li>\n  );\n};\nexport default Contact;\n","import { useSelector } from 'react-redux/es/hooks/useSelector';\nimport css from './ContactList.module.css';\n\nimport Contact from 'components/Contact/Contact';\nimport { getContacts } from 'redux/selectors';\n\nconst ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(state => state.contacts.filter);\n  const getFilteredContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(normalizedFilter);\n    });\n  };\n\n  const filteredContacts = getFilteredContacts();\n  return (\n    <ul className={css.contacts__list}>\n      {filteredContacts.map(({ id, number, name }) => {\n        return <Contact key={id} id={id} name={name} number={number} />;\n      })}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { getIsLoading } from 'redux/selectors';\nimport css from './Contacts.module.css';\nimport Section from 'components/Section/Section';\nimport Form from 'components/Form/Form';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/operations';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <Section title=\"Contacts\">\n      <div className={css.contacts_content}>\n        <Form />\n        <Filter />\n        {isLoading && <h2>Loading...</h2>}\n        <ContactList />\n      </div>\n    </Section>\n  );\n};\n\nexport default Contacts;\n","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Section_section__Z2PLw\"};","import css from './Section.module.css';\n\nconst Section = ({ title, children }) => {\n  return (\n    <section className={css.section}>\n      {title ? <h2>{title}</h2> : <></>}\n      {children}\n    </section>\n  );\n};\n\nexport default Section;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["getContacts","state","contacts","items","getIsLoading","isLoading","getFilter","filter","inputNameId","nanoid","inputPhoneId","useState","name","setName","number","setNumber","currentContact","setCurrentContact","useSelector","dispatch","useDispatch","onAddContact","contact","presentContacts","checkContactRepetition","addContact","alert","showAlert","formReset","onInputChange","event","currentTarget","value","prevState","className","css","onSubmit","preventDefault","htmlFor","id","type","pattern","title","placeholder","required","onChange","text","target","filterChange","onClick","deleteContact","filteredContacts","normalizedFilter","toLowerCase","includes","getFilteredContacts","map","useEffect","fetchContacts","Section","children","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}