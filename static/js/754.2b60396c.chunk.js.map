{"version":3,"file":"static/js/754.2b60396c.chunk.js","mappings":"iRAMMA,GAAcC,EAAAA,EAAAA,IAAO,GACrBC,GAAcD,EAAAA,EAAAA,IAAO,GACrBE,GAAkBF,EAAAA,EAAAA,IAAO,GA6D/B,EA3DqB,WACnB,OAAwBG,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAEMC,GAAWC,EAAAA,EAAAA,MAoBjB,OACE,kBAAMC,UAAWC,EAAAA,EAAAA,WAAgBC,SATd,SAAAC,GACnBA,EAAMC,iBACNN,GAASO,EAAAA,EAAAA,IAAS,CAAEb,KAAAA,EAAME,MAAAA,EAAOE,SAAAA,KAEjCH,EAAQ,IACRE,EAAS,IACTE,EAAY,GACb,EAEC,WACE,kBAAOS,QAASnB,EAAhB,mBACA,kBACEoB,KAAK,OACLC,GAAIrB,EACJK,KAAK,QACLiB,MAAOjB,EACPkB,SA1BmB,SAAAP,GACvBV,EAAQU,EAAMQ,OAAOF,MACtB,EAyBKG,UAAQ,KAEV,kBAAON,QAASjB,EAAhB,qBACA,kBACEkB,KAAK,QACLC,GAAInB,EACJG,KAAK,QACLiB,MAAOf,EACPgB,SAhCoB,SAAAP,GACxBR,EAASQ,EAAMQ,OAAOF,MACvB,EA+BKG,UAAQ,KAEV,kBAAON,QAAShB,EAAhB,uBACA,kBACEiB,KAAK,WACLC,GAAIlB,EACJE,KAAK,WACLiB,MAAOb,EACPc,SArCuB,SAAAP,GAC3BN,EAAYM,EAAMQ,OAAOF,MAC1B,EAoCKG,UAAQ,KAEV,mBAAQL,KAAK,SAAb,uBAGL,ECrDD,EAViB,WACf,OACE,UAACM,EAAA,EAAD,CAASC,MAAM,UAAf,WACE,SAAC,EAAD,KACA,qDACA,SAAC,KAAD,CAASC,GAAI,SAAb,sBAGL,C,uDCXD,MAA0B,yB,SCU1B,EATgB,SAAC,GAAyB,IAAvBD,EAAsB,EAAtBA,MAAOE,EAAe,EAAfA,SACxB,OACE,qBAAShB,UAAWC,EAApB,UACGa,GAAQ,wBAAKA,KAAc,wBAC3BE,IAGN,C,qBCRD,KAAgB,WAAa,8B,wDCA7B,IAkBI5B,EAAS,eAAC6B,EAAD,uDAAQ,GAAR,OACXC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACb,EAAIc,GAWvD,OAREd,IAFFc,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbQ,C","sources":["components/RegisterForm/RegisterForm.js","Pages/Register/Register.js","webpack://react-homework-template/./src/components/Section/Section.module.css?dbe8","components/Section/Section.js","webpack://react-homework-template/./src/components/LoginForm/LoginForm.module.css?4ac5","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState } from 'react';\nimport { nanoid } from 'nanoid';\n\nimport css from '../LoginForm/LoginForm.module.css';\nimport { register } from 'redux/auth/auth-operations';\nimport { useDispatch } from 'react-redux';\nconst nameInputId = nanoid(5);\nconst mailInputId = nanoid(5);\nconst passwordInputId = nanoid(5);\n\nconst RegisterForm = () => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const dispatch = useDispatch();\n\n  const handleNameChange = event => {\n    setName(event.target.value);\n  };\n  const handleEmailChange = event => {\n    setEmail(event.target.value);\n  };\n\n  const handlePasswordChange = event => {\n    setPassword(event.target.value);\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    dispatch(register({ name, email, password }));\n\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n  return (\n    <form className={css.login_form} onSubmit={handleSubmit}>\n      <label htmlFor={nameInputId}>Name</label>\n      <input\n        type=\"text\"\n        id={nameInputId}\n        name=\"email\"\n        value={name}\n        onChange={handleNameChange}\n        required\n      />\n      <label htmlFor={mailInputId}>E-mail</label>\n      <input\n        type=\"email\"\n        id={mailInputId}\n        name=\"email\"\n        value={email}\n        onChange={handleEmailChange}\n        required\n      />\n      <label htmlFor={passwordInputId}>Password</label>\n      <input\n        type=\"password\"\n        id={passwordInputId}\n        name=\"password\"\n        value={password}\n        onChange={handlePasswordChange}\n        required\n      />\n      <button type=\"submit\">Sign up</button>\n    </form>\n  );\n};\n\nexport default RegisterForm;\n","import { NavLink } from 'react-router-dom';\nimport Section from 'components/Section/Section';\nimport RegisterForm from 'components/RegisterForm/RegisterForm';\n\nconst Register = () => {\n  return (\n    <Section title=\"Sign up\">\n      <RegisterForm></RegisterForm>\n      <p>Already have an account?</p>\n      <NavLink to={'/login'}>Log in</NavLink>\n    </Section>\n  );\n};\n\nexport default Register;\n","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Section_section__Z2PLw\"};","import css from './Section.module.css';\n\nconst Section = ({ title, children }) => {\n  return (\n    <section className={css.section}>\n      {title ? <h2>{title}</h2> : <></>}\n      {children}\n    </section>\n  );\n};\n\nexport default Section;\n","// extracted by mini-css-extract-plugin\nexport default {\"login_form\":\"LoginForm_login_form__5NzpT\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["nameInputId","nanoid","mailInputId","passwordInputId","useState","name","setName","email","setEmail","password","setPassword","dispatch","useDispatch","className","css","onSubmit","event","preventDefault","register","htmlFor","type","id","value","onChange","target","required","Section","title","to","children","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}